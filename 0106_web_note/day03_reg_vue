1. 正则表达式
    功能：验证一个字符串是否符合某个要求
    1.1 应用场景：
        表单的验证(用户名、密码等格式要求)  ★
        读取字符串中符合规则的内容
        替换字符串中符合规则的内容
    1.2 语法：
        ① var reg = new RegExp("正则表达式")
        ② var reg = /正则表达式/
    1.3 常用方法
        reg.test(str);   检测str字符串是否符合reg正则的要求   ★
        str.match(reg);   从str中提取符合reg正则要求的字符串
        str.replace(reg,"a");   将str中符合reg正则要求的字符串换成a
        案例：
            密码的要求：8位以上字母+数字+_
                var passwordReg=/^[a-zA-Z0-9_]{8,}$/;
            用户名：6-20 字母+数字
                var usernameReg=/^[a-zA-Z0-9]{6,20}$/
            邮箱的正则
                var emailReg=/^[a-zA-Z0-9_\.-]+@([a-zA-Z0-9-]+[\.]{1})+[a-zA-Z]+$/;
2. Vue 框架
    概念：在特定的场景下，遇到的特定问题，需要套用固定的解决方案去解决
    JavaScript的框架
    2.1 框架的HelloWorld
        ① 对Vue框架搭建一下
            a. 将框架的代码，引入到网页内
                <script src="vue.js"></script>
            b. 设置一个区域(Vue要操作的区域)
                <div id="app"></div>
            c. 在这个区域的下方，创建Script标签,new Vue()对象
                <script>
                    new Vue();
                </script>
            d. 给Vue对象传递一个js对象(通过{}方式创建的js对象)
                new Vue({
                    "el":"#app",//el是选择Vue可操作的区域
                    "data":{},//设置数据模型
                    "methods":{}
                });
        ② 功能实现
            a. 设置数据模型
                "data":{
                    "msg":"div的内容"
                },
            b. 将Vue对象中的数据模型和网页的标签体做一个绑定关系
                <div>{{msg}}</div>  插值表达式
            c. 想要操作div中的内容的时候，都可以转化为操作msg
                在元素上绑定事件：
                    <input type="button" value="获得div中的内容" @click="getText"/>
                在Vue对象的methods内创建函数
                    "methods":{
                        "getText":function () {
                            alert(this.msg)
                        },
                        "setText":function () {
                            this.msg="Vue设置的新值"
                        }
                    }
    2.2 声明式渲染
    2.3 Vue操作了标签体(双标签中的内容)
        插值表达式：  {{数据模型的key值}}
    2.4 Vue可以操作属性值
        ①单向绑定   (修改数据模型，html页面同步效果，但是用户修改html属性值，数据模型不随之改变)
        语法：v-bind:原属性名="数据模型的key值"
        案例：
            数据模型：
                "data":{
                    "msg":"div的内容123",
                    "aMsg":"点我",
                    "username":"admin"
                },
            html代码：
                <a v-bind:href="username">{{aMsg}}</a>
                <input type="text" v-bind:value="username"/><br/>
        简写：  :原属性名="数据模型的key值"
        ② 双向绑定
        语法： v-model:原属性名="数据模型的key值"
        案例：
            数据模型：
                "data":{
                    "msg":"div的内容123",
                    "aMsg":"点我",
                    "username":"admin"
                },
            html代码：
                <input type="text" v-model:value="username"/><br/>
        简写：v-model="数据模型的key值"
              v-model.trim="数据模型的key值"    去前后空格
    2.5 条件渲染
        功能：控制元素是否显示
        ① v-if   true显示，false不显示
             data:{
                flag:true,
            },
            <div v-if="flag" class="divs">div1</div>
            不显示：标签直接删掉
        ② v-else  true不显示，false显示
            不能单独使用
            v-if和v-else中间不能有多余标签
        ③ v-show  true显示，false不显示
            不显示是通过css样式设置隐藏
    2.6 列表渲染
        位置：循环哪个标签v-for加在哪个标签上
        语法：v-for=""
        ① 简单数组
            data:{
                hobbys:["java","抖音","大数据","前端","UI","快手"],
            },
            <ul>
                <li v-for="hobby in hobbys">{{hobby}}</li>
            </ul>
        ② 对象数组
            computers:[
                {
                    id:101,
                    brand:"联想",
                    price:5000
                },{
                    id:102,
                    brand:"外星人",
                    price:15000
                },{
                    id:103,
                    brand:"诺基亚",
                    price:6000
                }]
            <tr v-for="computer in computers">
                <td>{{computer.id}}</td>
                <td>{{computer.brand}}</td>
                <td>{{computer.price}}</td>
            </tr>
        需要索引的语法：v-for="(变量,index) in 数组"
            <tr v-for="(computer,index) in computers">
    2.7 事件驱动
        语法： v-on:事件类型="函数调用"
        案例：
            <input type="button" value="按钮" v-on:click="clickTest"/>
            methods:{
                clickTest:function () {
                    alert("点击事件绑定成功")
                }
            }
        简写：
            v-on:click="clickTest"   ==>    @click="clickTest"
            clickTest:function () {
                alert("点击事件绑定成功")
            }
            ==>
            clickTest(){
                alert("点击事件绑定成功")
            }
        取消控件的默认行为
            ① 超链接
            ② 表单提交
            js: event.preventDefault();//取消控件的默认行为
            Vue: @click.prevent="clickTest"     100%取消
        阻止事件冒泡
            js: event.stopPropagation();//阻止事件冒泡
            Vue: @click.stop="div2Test"
    2.8 属性的侦听
        功能：当数据模型的值放生变化时，被Vue监听到，然后执行一个函数
        new Vue({
                el:"#app",
                data:{
                    firstName:"詹姆斯",
                    lastName:"哈登",
                    fullName:"詹姆斯.哈登"
                },
                methods:{},
                watch:{
                    firstName:function () {
                        this.fullName=this.firstName+"."+this.lastName
                    },
                    lastName:function () {
                        this.fullName=this.firstName+"."+this.lastName
                    },
                }
            })
    2.9 Vue生命周期
        对象的创建前后
        渲染(挂载)前后
        修改前后
        销毁前后
        钩子函数：
            功能：让开发者在Vue的生命周期阶段执行自定义函数
            位置：和el/data/methods/watch同级别
            代码：
                beforeCreate:function () {
                    console.log("Vue对象初始化前执行...");
                    console.log(this.msg);//没有
                    this.fun01();//报错
                },
                created:function () {
                    console.log("Vue对象初始化后执行...");
                    console.log(this.msg);//有值
                    this.fun01();//能调用到
                },
                beforeMount:function () {
                    console.log("Vue对象渲染前执行...");
                    console.log(document.getElementById("div1").innerText);//{{msg}}
                },
                mounted:function () {
                    console.log("Vue对象渲染后执行...");
                    console.log(document.getElementById("div1").innerText);//div中的内容
                }














